{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addTask","trimedTitle","trim","addItem","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Todolist","newTitle","changeTodoListTitle","id","removeTodoList","tasks","map","t","key","isDone","type","checked","newIsDoneValue","changeTaskStatus","newValue","changeTaskTitle","removeTask","filter","changeFilter","App","todoListId","task","tasksObj","find","setTasksObj","filteredTasks","v1","newTasks","todolistId","todolist","todoLists","tl","setTodoLists","todoListId1","todoListId2","filteredTodoList","todoList","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f72fc93c.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\");\r\n    let [error, setError] = useState<string | null>(null);\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n        setError(null);\r\n    };\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    };\r\n    const addTask = () => {\r\n        let trimedTitle = title.trim();\r\n        if (trimedTitle) {\r\n            props.addItem(trimedTitle);\r\n        } else {\r\n            setError(\"Введите задание\");\r\n        }\r\n        setTitle(\"\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(\"\");\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value);\r\n\r\n    return (\r\n        editMode\r\n            ? <input value={title}\r\n                     onChange={onChangeTitleHandler}\r\n                     onBlur={activateViewMode} autoFocus/>\r\n            : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    filter: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.id);\r\n    };\r\n    const changeTodoListTitle = (newTitle: string) => {\r\n        props.changeTodoListTitle(props.id, newTitle);\r\n    };\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    return <div>\r\n        <h3> <EditableSpan title={props.title} onChange={changeTodoListTitle}/>\r\n            <button onClick={removeTodoList}>x</button>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id)\r\n                    }\r\n                    const onChangeTitleHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id)\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <input type=\"checkbox\"\r\n                               checked={t.isDone}\r\n                               onChange={onChangeStatusHandler}/>\r\n                        <EditableSpan title={t.title}\r\n                        onChange={onChangeTitleHandler}/>\r\n                        <button onClick={onClickHandler}>x</button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === \"all\" ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </button>\r\n            <button className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from 'uuid';\r\nimport {TaskType, Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    function changeTaskStatus(id: string, isDone: boolean, todoListId: string) {\r\n        let task = tasksObj[todoListId].find(t => t.id === id)\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasksObj({...tasksObj});\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todoListId: string) {\r\n        let task = tasksObj[todoListId].find(t => t.id === id)\r\n        if (task) {\r\n            task.title = newTitle;\r\n            setTasksObj({...tasksObj});\r\n        }\r\n    }\r\n\r\n    function removeTask(id: string, todoListId: string) {\r\n        let tasks = tasksObj[todoListId];\r\n        let filteredTasks = tasks.filter(t => t.id !== id);\r\n        tasksObj[todoListId] = filteredTasks;\r\n        setTasksObj({...tasksObj});\r\n    }\r\n\r\n    function addTask(title: string, todoListId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        let tasks = tasksObj[todoListId];\r\n        let newTasks = [task, ...tasks];\r\n        tasksObj[todoListId] = newTasks\r\n        setTasksObj({...tasksObj});\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todoLists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodoLists([...todoLists]);\r\n        }\r\n    }\r\n\r\n    let todoListId1 = v1();\r\n    let todoListId2 = v1();\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListId2, title: \"What to buy\", filter: \"all\"}\r\n    ]);\r\n\r\n    let removeTodoList = (todoListId: string) => {\r\n        let filteredTodoList = todoLists.filter(tl => tl.id !== todoListId);\r\n        setTodoLists(filteredTodoList);\r\n        delete tasksObj[todoListId];\r\n        setTasksObj({...tasksObj});\r\n    };\r\n\r\n    let [tasksObj, setTasksObj] = useState<TasksStateType>({\r\n        [todoListId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false}],\r\n        [todoListId2]: [\r\n            {id: v1(), title: \"Book\", isDone: true},\r\n            {id: v1(), title: \"Milk\", isDone: true}]\r\n    });\r\n\r\n    function changeTodoListTitle(id: string, newTitle: string) {\r\nconst todoList = todoLists.find(tl => tl.id === id)\r\n        if (todoList) {\r\n            todoList.title = newTitle;\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        let todoList: TodoListType = {\r\n            id: v1(),\r\n            filter: 'all',\r\n            title: title\r\n        };\r\n        setTodoLists([todoList, ...todoLists]);\r\n        setTasksObj({...tasksObj, [todoList.id]: []});\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList}/>\r\n            {\r\n                todoLists.map((tl) => {\r\n                    let tasksForTodolist = tasksObj[tl.id];\r\n\r\n                    if (tl.filter === \"active\") {\r\n                        tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false);\r\n                    }\r\n                    if (tl.filter === \"completed\") {\r\n                        tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true);\r\n                    }\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        addTask={addTask}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTodoListTitle={changeTodoListTitle}/>\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}