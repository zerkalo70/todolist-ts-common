{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addTask","trimedTitle","trim","addItem","TextField","variant","label","value","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","color","onClick","ControlPoint","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Todolist","newTitle","changeTodoListTitle","id","removeTodoList","Delete","tasks","map","t","key","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","newValue","changeTaskTitle","removeTask","Button","filter","changeFilter","App","todoListId","task","tasksObj","find","setTasksObj","filteredTasks","v1","newTasks","todolistId","todolist","todoLists","tl","setTodoLists","todoListId1","todoListId2","filteredTodoList","todoList","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tasksForTodolist","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.02f1209c.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\");\r\n    let [error, setError] = useState<string | null>(null);\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n        setError(null);\r\n    };\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    };\r\n    const addTask = () => {\r\n        let trimedTitle = title.trim();\r\n        if (trimedTitle) {\r\n            props.addItem(trimedTitle);\r\n        } else {\r\n            setError(\"Введите задание\");\r\n        }\r\n        setTitle(\"\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                label={'Type value'}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                helperText={error}\r\n            />\r\n            <IconButton color={'primary'} onClick={addTask}>\r\n                <ControlPoint/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(\"\");\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value);\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField value={title}\r\n                     onChange={onChangeTitleHandler}\r\n                     onBlur={activateViewMode} autoFocus/>\r\n            : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    filter: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.id);\r\n    };\r\n    const changeTodoListTitle = (newTitle: string) => {\r\n        props.changeTodoListTitle(props.id, newTitle);\r\n    };\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} onChange={changeTodoListTitle}/>\r\n            <IconButton onClick={removeTodoList}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                props.tasks.map(t => {\r\n\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id)\r\n                    }\r\n                    const onChangeTitleHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id)\r\n                    }\r\n\r\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox\r\n                               checked={t.isDone}\r\n                               onChange={onChangeStatusHandler}/>\r\n                        <EditableSpan title={t.title}\r\n                                      onChange={onChangeTitleHandler}/>\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant={props.filter === \"all\" ? 'contained' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}>All\r\n            </Button>\r\n            <Button variant={props.filter === \"active\" ? 'contained' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === \"completed\" ? 'contained' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from 'uuid';\r\nimport {TaskType, Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    function changeTaskStatus(id: string,\r\n                              isDone: boolean, todoListId: string) {\r\n        let task = tasksObj[todoListId].find(t => t.id === id)\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasksObj({...tasksObj});\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(id: string,\r\n                             newTitle: string, todoListId: string) {\r\n        let task = tasksObj[todoListId].find(t => t.id === id)\r\n        if (task) {\r\n            task.title = newTitle;\r\n            setTasksObj({...tasksObj});\r\n        }\r\n    }\r\n\r\n    function removeTask(id: string, todoListId: string) {\r\n        let tasks = tasksObj[todoListId];\r\n        let filteredTasks = tasks.filter(t => t.id !== id);\r\n        tasksObj[todoListId] = filteredTasks;\r\n        setTasksObj({...tasksObj});\r\n    }\r\n\r\n    function addTask(title: string, todoListId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        let tasks = tasksObj[todoListId];\r\n        let newTasks = [task, ...tasks];\r\n        tasksObj[todoListId] = newTasks\r\n        setTasksObj({...tasksObj});\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todoLists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodoLists([...todoLists]);\r\n        }\r\n    }\r\n\r\n    let todoListId1 = v1();\r\n    let todoListId2 = v1();\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListId2, title: \"What to buy\", filter: \"all\"}\r\n    ]);\r\n\r\n    let removeTodoList = (todoListId: string) => {\r\n        let filteredTodoList = todoLists.filter(tl => tl.id !== todoListId);\r\n        setTodoLists(filteredTodoList);\r\n        delete tasksObj[todoListId];\r\n        setTasksObj({...tasksObj});\r\n    };\r\n\r\n    let [tasksObj, setTasksObj] = useState<TasksStateType>({\r\n        [todoListId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false}],\r\n        [todoListId2]: [\r\n            {id: v1(), title: \"Book\", isDone: true},\r\n            {id: v1(), title: \"Milk\", isDone: true}]\r\n    });\r\n\r\n    function changeTodoListTitle(id: string, newTitle: string) {\r\n        const todoList = todoLists.find(tl => tl.id === id)\r\n        if (todoList) {\r\n            todoList.title = newTitle;\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        let todoList: TodoListType = {\r\n            id: v1(),\r\n            filter: 'all',\r\n            title: title\r\n        };\r\n        setTodoLists([todoList, ...todoLists]);\r\n        setTasksObj({...tasksObj, [todoList.id]: []});\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar>\r\n                    <IconButton edge={'start'} color={'inherit'} aria-label={'menu'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color={'inherit'}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '10px'}}>\r\n                <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={10}>\r\n                {\r\n                    todoLists.map((tl) => {\r\n                        let tasksForTodolist = tasksObj[tl.id];\r\n\r\n                        if (tl.filter === \"active\") {\r\n                            tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false);\r\n                        }\r\n                        if (tl.filter === \"completed\") {\r\n                            tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true);\r\n                        }\r\n                        return <Grid item>\r\n                            <Paper style={{padding: '10px'}}>\r\n                        <Todolist\r\n                            key={tl.id}\r\n                            id={tl.id}\r\n                            title={tl.title}\r\n                            filter={tl.filter}\r\n                            tasks={tasksForTodolist}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            addTask={addTask}\r\n                            removeTodoList={removeTodoList}\r\n                            changeTodoListTitle={changeTodoListTitle}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}