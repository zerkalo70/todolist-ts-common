{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","addTask","trimedTitle","trim","addItem","TextField","variant","label","value","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","color","onClick","ControlPoint","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Todolist","newTitle","changeTodoListTitle","id","removeTodoList","Delete","tasks","map","t","key","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","newValue","changeTaskTitle","removeTask","Button","filter","changeFilter","initialState","AppWithRedux","dispatch","useDispatch","todoLists","useSelector","state","todolists","tasksObj","todoListId","type","todolistId","taskId","action","addTaskAC","changeTaskStatusAC","ChangeTodoListTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","v1","AddTodoListAC","spacing","tl","tasksForTodolist","item","Paper","rootReducer","combineReducers","stateCopy","filteredTasks","newTask","newTasks","task","find","todoList","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f00f91ce.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\");\r\n    let [error, setError] = useState<string | null>(null);\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n        setError(null);\r\n    };\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    };\r\n    const addTask = () => {\r\n        let trimedTitle = title.trim();\r\n        if (trimedTitle) {\r\n            props.addItem(trimedTitle);\r\n        } else {\r\n            setError(\"Введите задание\");\r\n        }\r\n        setTitle(\"\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                label={'Type value'}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                helperText={error}\r\n            />\r\n            <IconButton color={'primary'} onClick={addTask}>\r\n                <ControlPoint/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(\"\");\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value);\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField value={title}\r\n                     onChange={onChangeTitleHandler}\r\n                     onBlur={activateViewMode} autoFocus/>\r\n            : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    filter: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.id);\r\n    };\r\n    const changeTodoListTitle = (newTitle: string) => {\r\n        props.changeTodoListTitle(props.id, newTitle);\r\n    };\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} onChange={changeTodoListTitle}/>\r\n            <IconButton onClick={removeTodoList}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                props.tasks.map(t => {\r\n\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id)\r\n                    }\r\n                    const onChangeTitleHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id)\r\n                    }\r\n\r\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox\r\n                               checked={t.isDone}\r\n                               onChange={onChangeStatusHandler}/>\r\n                        <EditableSpan title={t.title}\r\n                                      onChange={onChangeTitleHandler}/>\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant={props.filter === \"all\" ? 'contained' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}>All\r\n            </Button>\r\n            <Button variant={props.filter === \"active\" ? 'contained' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === \"completed\" ? 'contained' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import {FilterValuesType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\ntype ChangeTodoListTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\ntype ChangeTodoListFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType = RemoveTodoListActionType |\r\n    AddTodoListActionType | ChangeTodoListTitleActionType |\r\n    ChangeTodoListFilterActionType\r\n\r\n// export let todoListId1 = v1();\r\n// export let todoListId2 = v1();\r\n\r\nconst initialState: Array<TodoListType> = [\r\n    // {id: todoListId1, title: \"What to learn\", filter: \"all\"},\r\n    // {id: todoListId2, title: \"What to buy\", filter: \"all\"}\r\n]\r\n\r\nexport const todolistsReducer = (\r\n    state: Array<TodoListType> = initialState, action: ActionsType): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{id: action.todolistId, title: action.title, filter: \"all\"}, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todoList = state.find(tl => tl.id === action.id)\r\n            if (todoList) {\r\n                todoList.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todoList = state.find(tl => tl.id === action.id)\r\n            if (todoList) {\r\n                todoList.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodoListActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const AddTodoListAC = (title: string): AddTodoListActionType => {\r\n    return { type: 'ADD-TODOLIST', title, todolistId: v1()}\r\n}\r\nexport const ChangeTodoListTitleAC = (id: string, title: string): ChangeTodoListTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const ChangeTodoListFilterAC = (filter: FilterValuesType, id: string): ChangeTodoListFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n\r\n","import {FilterValuesType, TasksStateType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListActionType, RemoveTodoListActionType} from \"./todolists-reducer\";\r\n\r\n\r\ntype RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todolistId: string\r\n    taskId: string\r\n}\r\ntype AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\ntype ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    todolistId: string\r\n    isDone: boolean\r\n}\r\ntype ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType |\r\n    AddTaskActionType |\r\n    ChangeTaskStatusActionType |\r\n    ChangeTaskTitleActionType |\r\n    AddTodoListActionType |\r\n    RemoveTodoListActionType;\r\n\r\nconst initialState: TasksStateType = {\r\n    // [todoListId1]: [\r\n    //     {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n    //     {id: v1(), title: \"JS\", isDone: true},\r\n    //     {id: v1(), title: \"ReactJS\", isDone: false},\r\n    //     {id: v1(), title: \"Rest API\", isDone: false},\r\n    //     {id: v1(), title: \"GraphQL\", isDone: false}],\r\n    // [todoListId2]: [\r\n    //     {id: v1(), title: \"Book\", isDone: true},\r\n    //     {id: v1(), title: \"Milk\", isDone: true}]\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType):\r\n    TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state};\r\n            const tasks = state[action.todolistId];\r\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\r\n            stateCopy[action.todolistId] = filteredTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state};\r\n            const tasks = state[action.todolistId];\r\n            const newTask = {id: v1(), title: action.title, isDone: false};\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            const stateCopy = {...state};\r\n            let tasksObj = stateCopy[action.todolistId]\r\n            let task = tasksObj.find(t => t.id === action.taskId)\r\n            if (task) {\r\n                task.isDone = action.isDone;\r\n            }\r\n            return stateCopy;\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            const stateCopy = {...state};\r\n            let tasksObj = stateCopy[action.todolistId]\r\n            let task = tasksObj.find(t => t.id === action.taskId)\r\n            if (task) {\r\n                task.title = action.title;\r\n            }\r\n            return stateCopy;\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const stateCopy = {...state};\r\n            stateCopy[action.todolistId] = [];\r\n            return stateCopy;\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state};\r\n            delete stateCopy[action.id];\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return { type: 'REMOVE-TASK', todolistId, taskId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return { type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string,\r\n                                   isDone: boolean,\r\n                                   todolistId: string): ChangeTaskStatusActionType => {\r\n    return { type: 'CHANGE-TASK-STATUS', isDone, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string,\r\n                                   title: string,\r\n                                   todolistId: string): ChangeTaskTitleActionType => {\r\n    return { type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\n\r\n","import React, {useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from 'uuid';\r\nimport {TaskType, Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {\r\n    AppBar, Button, Container, Grid,\r\n    IconButton, Paper, Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    AddTodoListAC,\r\n    ChangeTodoListFilterAC,\r\n    ChangeTodoListTitleAC,\r\n    RemoveTodolistAC,\r\n    todolistsReducer} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const dispatch = useDispatch();\r\n    const todoLists = useSelector<AppRootStateType,\r\n        Array<TodoListType>>(state => state.todolists);\r\n    const tasksObj = useSelector<AppRootStateType,\r\n        TasksStateType>(state => state.tasks);\r\n\r\n    function removeTask(id: string, todoListId: string) {\r\n        /*const action = removeTaskAC(id, todoListId);\r\n        dispatchToTasksReducer(action);*/\r\n        dispatch(removeTaskAC(id, todoListId));\r\n    }\r\n\r\n    function addTask(title: string, todoListId: string) {\r\n        const action = addTaskAC(title, todoListId);\r\n        dispatch(action);\r\n    }\r\n\r\n    function changeTaskStatus(\r\n        id: string, isDone: boolean, todoListId: string) {\r\n        const action = changeTaskStatusAC(id, isDone, todoListId);\r\n        dispatch(action);\r\n    }\r\n\r\n    function changeTaskTitle(\r\n        id: string, newTitle: string, todoListId: string) {\r\n        const action = changeTaskTitleAC(id, newTitle, todoListId);\r\n        dispatch(action);\r\n    }\r\n\r\n    function changeTodoListTitle(id: string, newTitle: string) {\r\n        const action = ChangeTodoListTitleAC(id, newTitle);\r\n        dispatch(action);\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        const action = ChangeTodoListFilterAC(value, todolistId);\r\n        dispatch(action);\r\n    }\r\n\r\n    let removeTodoList = (todoListId: string) => {\r\n        const action = RemoveTodolistAC(todoListId);\r\n        dispatch(action);\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        const action = AddTodoListAC(title);\r\n        dispatch(action);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar>\r\n                    <IconButton edge={'start'} color={'inherit'} aria-label={'menu'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color={'inherit'}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '10px'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={10}>\r\n                    {\r\n                        todoLists.map((tl) => {\r\n                            let tasksForTodolist = tasksObj[tl.id];\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true);\r\n                            }\r\n                            return <Grid item>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        filter={tl.filter}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        addTask={addTask}\r\n                                        removeTodoList={removeTodoList}\r\n                                        changeTodoListTitle={changeTodoListTitle}/>\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithReducers from \"./AppWithReducers\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store= {store}>\r\n    <AppWithRedux/>\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}